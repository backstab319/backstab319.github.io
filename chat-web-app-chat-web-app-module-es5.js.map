{"version":3,"sources":["src/app/applications/chat-web-app/chat-web-app.page.html","src/app/applications/chat-web-app/sign-up/sign-up.component.html","src/app/applications/chat-web-app/username/username.component.html","src/app/applications/chat-web-app/chat-page/chat-page.guard.ts","src/app/applications/chat-web-app/chat-page/username.service.ts","src/app/applications/chat-web-app/chat-web-app-routing.module.ts","src/app/applications/chat-web-app/chat-web-app.module.ts","src/app/applications/chat-web-app/chat-web-app.page.scss","src/app/applications/chat-web-app/chat-web-app.page.ts","src/app/applications/chat-web-app/sign-up/sign-up.component.scss","src/app/applications/chat-web-app/sign-up/sign-up.component.ts","src/app/applications/chat-web-app/username/username.component.scss","src/app/applications/chat-web-app/username/username.component.ts","src/app/applications/server.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,q6EAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,syGAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,25GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQf,QAAa,aAAb;AAAA;AAAA;AAEE,6BACU,EADV,EAEU,MAFV,EAEwB;AAAA;;AADd,aAAA,EAAA,GAAA,EAAA;AACA,aAAA,MAAA,GAAA,MAAA;AACN;;AALN;AAAA;AAAA,gCAQI,KARJ,EASI,QATJ,EAS0B;AAEpB,cAAI,CAAC,KAAK,EAAL,CAAQ,SAAR,EAAL,EAA0B;AACxB,iBAAK,MAAL,CAAY,aAAZ,CAA0B,4BAA1B;AACD;;AAED,iBAAO,KAAK,EAAL,CAAQ,SAAR,EAAP;AACH;AAhBH;;AAAA;AAAA,OAAA;;;;cAGgB,8CAAA,CAAA,iBAAA;;cACI,4CAAA,CAAA,QAAA;;;;AAJP,IAAA,aAAa,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAHzB,MAAA,CAAA,0CAAA,CAAA,YAAA,CAAA,CAAA,CAAW;AACV,MAAA,UAAU,EAAE;AADF,KAAX,CAGyB,E,uEAGV,8CAAA,CAAA,iBAAA,C,EACI,4CAAA,CAAA,QAAA,C,EAJM,CAAA,EAAb,aAAa,CAAb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCb,QAAa,eAAb;AAAA;AAAA;AAEE,+BACU,IADV,EAEU,aAFV,EAEsC;AAAA;;AAAA;;AAD5B,aAAA,IAAA,GAAA,IAAA;AACA,aAAA,aAAA,GAAA,aAAA;AAEF,aAAA,OAAA,GAAU,KAAV;AACA,aAAA,QAAA,GAAqB;AAAC,UAAA,QAAQ,EAAE;AAAX,SAArB;;AAiER,aAAA,iBAAA,GAAoB,YAAK;AACvB,iBAAO,KAAI,CAAC,IAAL,CAAU,GAAV,CAAc,KAAI,CAAC,aAAL,CAAmB,gBAAnB,KAAwC,YAAtD,CAAP;AACD,SAFD;AAnEK,OALP,CAWE;;;AAXF;AAAA;AAAA,sCAYgB,IAZhB,EAY4B;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAO,KAAK,IAAL,CAAU,IAAV,CAAkD,KAAK,aAAL,CAAmB,gBAAnB,KAAwC,YAA1F,EAAwG,IAAxG,CAAP;AACD;AA7BH;AAAA;AAAA,sCA+BgB,OA/BhB,EA+BiC,QA/BjC,EA+BmD,MA/BnD,EA+BiE;AAC7D,eAAK,WAAL,CAAiB,QAAjB;AACA,UAAA,OAAO,CAAC,GAAR,CAAY,OAAZ;AACA,eAAK,IAAL,GAAY,MAAZ;AACA,UAAA,OAAO,CAAC,GAAR,CAAY,KAAK,IAAjB;AACD;AApCH;AAAA;AAAA,wCAsCkB,OAtClB,EAsCmC,MAtCnC,EAsCiD;AAC7C,UAAA,OAAO,CAAC,GAAR,CAAY,OAAZ;AACA,eAAK,IAAL,GAAY,MAAZ;AACD;AAzCH;AAAA;AAAA,oCA2CW;AACP,iBAAO,KAAK,OAAZ;AACD;AA7CH;AAAA;AAAA,kCA+CS;AACL,eAAK,OAAL,GAAe,IAAf;AACD;AAjDH;AAAA;AAAA,oCAmDc,QAnDd,EAmD8B;AAC1B,eAAK,QAAL,CAAc,QAAd,GAAyB,QAAzB;AACA,eAAK,OAAL;AACD;AAtDH;AAAA;AAAA,sCAwDa;AACT,iBAAO,KAAK,QAAL,CAAc,QAArB;AACD,SA1DH,CA4DE;;AA5DF;AAAA;AAAA,mCA6Da,IA7Db,EA6DyB;AACrB,eAAK,sBAAL,CAA4B,IAA5B;AACD;AA/DH;AAAA;AAAA,+CAiEyB,UAjEzB,EAiE2C;AACvC,eAAK,IAAL,CAAU,IAAV,CAAkC,KAAK,aAAL,CAAmB,gBAAnB,KAAwC,gBAA1E,EAA4F,UAA5F,EACG,SADH,CACa,UAAA,OAAO,EAAG;AACnB,YAAA,OAAO,CAAC,GAAR,CAAY,OAAZ;AACD,WAHH;AAID;AAtEH;;AAAA;AAAA,OAAA;;;;cAGkB,iDAAA,CAAA,YAAA;;cACS,4CAAA,CAAA,eAAA;;;;AAJd,IAAA,eAAe,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAH3B,MAAA,CAAA,0CAAA,CAAA,YAAA,CAAA,CAAA,CAAW;AACV,MAAA,UAAU,EAAE;AADF,KAAX,CAG2B,E,uEAGV,iDAAA,CAAA,YAAA,C,EACS,4CAAA,CAAA,eAAA,C,EAJC,CAAA,EAAf,eAAe,CAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHb,QAAM,MAAM,GAAW,CACrB;AACE,MAAA,IAAI,EAAE,EADR;AAEE,MAAA,SAAS,EAAE,+CAAA,CAAA,gBAAA;AAFb,KADqB,EAKrB;AACE,MAAA,IAAI,EAAE,WADR;AAEE,MAAA,YAAY,EAAE;AAAA,eAAM,mBAAA,CAAA,CAAA;AAAA;AAAA,oCAAA,EAAA,IAAA,CAAA,mBAAA,CAAA,IAAA,CAAA,IAAA;AAAA;AAAA,2EAAA,CAAA,EAAuC,IAAvC,CAA6C,UAAA,CAAC;AAAA,iBAAI,CAAC,CAAC,kBAAN;AAAA,SAA9C,CAAN;AAAA,OAFhB;AAGE,MAAA,OAAO,EAAE,CAAC,uDAAA,CAAA,eAAA,CAAD;AAHX,KALqB,CAAvB;;AAgBA,QAAa,2BAAb;AAAA;AAAA,KAAA;;AAAa,IAAA,2BAA2B,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAJvC,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAA,CAAS;AACR,MAAA,OAAO,EAAE,CAAC,4CAAA,CAAA,cAAA,CAAA,CAAa,QAAb,CAAsB,MAAtB,CAAD,CADD;AAER,MAAA,OAAO,EAAE,CAAC,4CAAA,CAAA,cAAA,CAAD;AAFD,KAAT,CAIuC,CAAA,EAA3B,2BAA2B,CAA3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAb,QAAa,oBAAb;AAAA;AAAA,KAAA;;AAAa,IAAA,oBAAoB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAVhC,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAA,CAAS;AACR,MAAA,OAAO,EAAE,CACP,4CAAA,CAAA,cAAA,CADO,EAEP,2CAAA,CAAA,aAAA,CAFO,EAGP,2CAAA,CAAA,aAAA,CAHO,EAIP,yDAAA,CAAA,6BAAA,CAJO,CADD;AAOR,MAAA,YAAY,EAAE,CAAC,+CAAA,CAAA,gBAAA,CAAD,EAAiB,yDAAA,CAAA,mBAAA,CAAjB,EAAoC,uDAAA,CAAA,iBAAA,CAApC,CAPN;AAQR,MAAA,eAAe,EAAE,CAAC,yDAAA,CAAA,mBAAA,CAAD,EAAoB,uDAAA,CAAA,iBAAA,CAApB;AART,KAAT,CAUgC,CAAA,EAApB,oBAAoB,CAApB;;;;;;;;;;;;;;;;ACtBb,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,qNAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACSf,QAAa,cAAb;AAAA;AAAA;AAEE,8BACU,QADV,EAEU,QAFV,EAEmC;AAAA;;AADzB,aAAA,QAAA,GAAA,QAAA;AACA,aAAA,QAAA,GAAA,QAAA;AACL;;AALP;AAAA;AAAA,mCAOU;AACN,eAAK,cAAL;AACD;AATH;AAAA;AAAA,yCAWsB;;;;;;;;;;AACF,2BAAM,KAAK,QAAL,CAAc,MAAd,CAAqB;AACzC,sBAAA,MAAM,EAAE,mBADiC;AAEzC,sBAAA,SAAS,EAAE,uFAF8B;AAGzC,sBAAA,OAAO,EAAE,CAAC;AACR,wBAAA,IAAI,EAAE,IADE;AAER,wBAAA,IAAI,EAAE;AAFE,uBAAD;AAHgC,qBAArB,CAAN;;;AAAV,oBAAA,O;;AAQN,2BAAM,OAAO,CAAC,OAAR,EAAN;;;;;;;;;AACD;AArBH;AAAA;AAAA,+CAuB4B;;;;;;;;;;AACP,2BAAM,KAAK,QAAL,CAAc,MAAd,CAAqB;AAC1C,sBAAA,SAAS,EAAE,yDAAA,CAAA,mBAAA;AAD+B,qBAArB,CAAN;;;AAAX,oBAAA,Q;;AAGC,2BAAM,QAAQ,CAAC,OAAT,EAAN;;;;;;;;;;;;AACR;AA5BH;;AAAA;AAAA,OAAA;;;;cAGsB,2CAAA,CAAA,iBAAA;;cACA,2CAAA,CAAA,iBAAA;;;;AAJT,IAAA,cAAc,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAL1B,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,kBADD;AAET,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,wGAAA,CAAA,EAAA,OAFS;;;;AAAA,KAAV,CAK0B,E,uEAGL,2CAAA,CAAA,iBAAA,C,EACA,2CAAA,CAAA,iBAAA,C,EAJK,CAAA,EAAd,cAAc,CAAd;;;;;;;;;;;;;;;;ACTb,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,iOAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACWf,QAAa,eAAb;AAAA;AAAA;AAEE,+BACU,QADV,EAEU,QAFV,EAGU,QAHV,EAIU,OAJV,EAIkC;AAAA;;AAHxB,aAAA,QAAA,GAAA,QAAA;AACA,aAAA,QAAA,GAAA,QAAA;AACA,aAAA,QAAA,GAAA,QAAA;AACA,aAAA,OAAA,GAAA,OAAA;AACL;;AAPP;AAAA;AAAA,mCAWU,CAAK;AAXf;AAAA;AAAA,2CAakB;AACd,eAAK,QAAL,CAAc,OAAd;AACD,SAfH,CAiBE;;AAjBF;AAAA;AAAA,mCAkBmB,UAlBnB,EAkBqC;;;;;;;;;;AAEjC,2BAAM,KAAK,mBAAL,CAAyB,UAAU,CAAC,KAAX,CAAiB,QAA1C,CAAN;;;yBACI,KAAK,a;;;;;AACP,oBAAA,OAAO,CAAC,GAAR,CAAY,gCAAZ;;;;AAGF;AACM,oBAAA,K,GAAgB,UAAU,CAAC,KAAX,CAAiB,S;AACjC,oBAAA,K,GAAgB,UAAU,CAAC,KAAX,CAAiB,S;;0BACnC,CAAC,UAAU,CAAC,KAAX,IAAqB,KAAK,CAAC,MAAN,GAAe,CAAf,IAAoB,KAAK,CAAC,MAAN,GAAe,CAAxD,IAA+D,KAAK,KAAK,KAA1E,MAAsF,K;;;;;AACxF;AACA,yBAAK,oBAAL;;;;AAGF;AACA,yBAAK,UAAL,GAAkB;AAChB,sBAAA,QAAQ,EAAE,UAAU,CAAC,KAAX,CAAiB,QADX;AAEhB,sBAAA,QAAQ,EAAE,UAAU,CAAC,KAAX,CAAiB;AAFX,qBAAlB;AAIA,yBAAK,OAAL,CAAa,UAAb,CAAwB,KAAK,UAA7B,E,CACA;;AACA,oBAAA,UAAU,CAAC,SAAX;AACA,yBAAK,QAAL,CAAc,OAAd;AACA,yBAAK,gBAAL;;;;;;;;;AACD;AA3CH;AAAA;AAAA,+CA6C4B;;;;;;;;;;AACN,2BAAM,KAAK,QAAL,CAAc,MAAd,CAAqB;AAC3C,sBAAA,MAAM,EAAE,OADmC;AAE3C,sBAAA,SAAS,EAAE,+BAFgC;AAG3C,sBAAA,OAAO,EAAE,CAAC;AACR,wBAAA,IAAI,EAAE,IADE;AAER,wBAAA,IAAI,EAAE;AAFE,uBAAD,CAHkC;AAO3C,sBAAA,WAAW,EAAE;AAP8B,qBAArB,CAAN;;;AAAZ,oBAAA,S;;AASC,2BAAM,SAAS,CAAC,OAAV,EAAN;;;;;;;;;;;;AACR;AAxDH;AAAA;AAAA,2CA0DwB;;;;;;;;;;AACJ,2BAAM,KAAK,QAAL,CAAc,MAAd,CAAqB;AACzC,sBAAA,OAAO,EAAE,2DADgC;AAEzC,sBAAA,KAAK,EAAE,SAFkC;AAGzC,sBAAA,QAAQ,EAAE;AAH+B,qBAArB,CAAN;;;AAAV,oBAAA,O;AAKN,oBAAA,OAAO,CAAC,OAAR;;;;;;;;;AACD;AAjEH;AAAA;AAAA,4CAmE4B,QAnE5B,EAmE4C;;;;;;;;;;AACxC;AACA,yBAAK,OAAL,CAAa,iBAAb,GAAiC,SAAjC,CAA2C,UAAA,KAAK,EAAG;AACjD,sBAAA,MAAI,CAAC,aAAL,GAAqB,KAAK,CAAC,QAAN,GAAiB,KAAjB,CAAuB,GAAvB,EAA4B,QAA5B,CAAqC,QAArC,CAArB;AACD,qBAFD,EAEG,UAAA,KAAK;AAAA,6BAAI,OAAO,CAAC,GAAR,CAAY,6CAAZ,EAA2D,KAA3D,CAAJ;AAAA,qBAFR;sDAGO,KAAK,a;;;;;;;;;AACb;AAzEH;;AAAA;AAAA,OAAA;;;;cAGsB,2CAAA,CAAA,iBAAA;;cACA,2CAAA,CAAA,iBAAA;;cACA,2CAAA,CAAA,iBAAA;;cACD,wDAAA,CAAA,iBAAA;;;;AANR,IAAA,eAAe,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAL3B,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,aADD;AAET,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,gHAAA,CAAA,EAAA,OAFS;;;;AAAA,KAAV,CAK2B,E,uEAGN,2CAAA,CAAA,iBAAA,C,EACA,2CAAA,CAAA,iBAAA,C,EACA,2CAAA,CAAA,iBAAA,C,EACD,wDAAA,CAAA,iBAAA,C,EANO,CAAA,EAAf,eAAe,CAAf;;;;;;;;;;;;;;;;ACXb,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,qOAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACWf,QAAa,iBAAb;AAAA;AAAA;AAEE,iCACU,QADV,EAEU,MAFV,EAGU,EAHV,EAIU,QAJV,EAImC;AAAA;;AAAA;;AAHzB,aAAA,QAAA,GAAA,QAAA;AACA,aAAA,MAAA,GAAA,MAAA;AACA,aAAA,EAAA,GAAA,EAAA;AACA,aAAA,QAAA,GAAA,QAAA;AAIH,aAAA,cAAA,GAAiB,KAAjB;AACC,aAAA,QAAA,GAAW,KAAX;;AAIR,aAAA,kBAAA,GAAqB;AAAA,iBAAM,MAAI,CAAC,QAAL,CAAc,OAAd,EAAN;AAAA,SAArB;AARK;;AAPP;AAAA;AAAA,mCAaU,CAAK;AAbf;AAAA;AAAA,8CAiBwB,YAjBxB,EAiB4C;AAAA;;AACxC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,cAAI,YAAY,CAAC,OAAjB,EAA0B;AACxB;AACD;;AAED,cAAM,GAAG,GAAG,YAAY,CAAC,KAAb,CAAmB,QAA/B;AACA,cAAM,IAAI,GAAG,YAAY,CAAC,KAAb,CAAmB,QAAhC;AAEA,eAAK,EAAL,CAAQ,aAAR,CAAsB;AACpB,YAAA,QAAQ,EAAE,GADU;AAEpB,YAAA,QAAQ,EAAE;AAFU,WAAtB,EAGG,SAHH,CAGa,UAAA,QAAQ,EAAG;AACtB,gBAAI,QAAQ,CAAC,MAAT,KAAoB,oBAAxB,EAA8C;AAC5C,cAAA,MAAI,CAAC,EAAL,CAAQ,aAAR,CAAsB,QAAQ,CAAC,OAA/B,EAAwC,GAAxC,EAA6C,QAAQ,CAAC,MAAtD;AACD,aAFD,MAEO;AACL,cAAA,MAAI,CAAC,EAAL,CAAQ,eAAR,CAAwB,QAAQ,CAAC,OAAjC,EAA0C,QAAQ,CAAC,MAAnD;AACD;AACF,WATD,EAUA,UAAA,KAAK,EAAG;AACN,YAAA,OAAO,CAAC,GAAR,CAAY,qCAAZ,EAAmD,KAAnD;AACD,WAZD,EAaA,YAAK;AACH;AACA,gBAAI,MAAI,CAAC,EAAL,CAAQ,IAAR,KAAiB,oBAArB,EAA2C;AACzC,cAAA,MAAI,CAAC,cAAL;AACD,aAFD,MAEO;AACL,cAAA,MAAI,CAAC,aAAL,CAAmB,GAAnB;AACD;AACF,WApBD;AAsBA,UAAA,YAAY,CAAC,SAAb;AACD;AA9DH;AAAA;AAAA,sCAgEgB,QAhEhB,EAgEgC;AAC5B,eAAK,EAAL,CAAQ,WAAR,CAAoB,QAApB;AACA,eAAK,QAAL,CAAc,OAAd;AACA,eAAK,EAAL,CAAQ,OAAR;AACA,eAAK,MAAL,CAAY,eAAZ,CAA4B,sCAA5B;AACD,SArEH,CAuEE;;AAvEF;AAAA;AAAA,yCAwEgB;AACZ,eAAK,QAAL,CAAc,OAAd;AACA,eAAK,eAAL;AACD;AA3EH;AAAA;AAAA,0CA6EuB;;;;;;;;;;AACJ,2BAAM,KAAK,QAAL,CAAc,MAAd,CAAqB;AACxC,sBAAA,SAAS,EAAE,uDAAA,CAAA,iBAAA;AAD6B,qBAArB,CAAN;;;AAAT,oBAAA,M;;AAGC,2BAAM,MAAM,CAAC,OAAP,EAAN;;;;;;;;;;;;AACR;AAlFH;AAAA;AAAA,yCAoFsB;;;;;;;;;;AACK,2BAAM,KAAK,QAAL,CAAc,MAAd,CAAqB;AAChD,sBAAA,OAAO,EAAE,oFADuC;AAEhD,sBAAA,QAAQ,EAAE,IAFsC;AAGhD,sBAAA,KAAK,EAAE,QAHyC;AAIhD,sBAAA,WAAW,EAAE;AAJmC,qBAArB,CAAN;;;AAAjB,oBAAA,c;AAMN,oBAAA,cAAc,CAAC,OAAf;;;;;;;;;AACD;AA5FH;;AAAA;AAAA,OAAA;;;;cAGsB,2CAAA,CAAA,iBAAA;;cACF,2CAAA,CAAA,eAAA;;cACJ,wDAAA,CAAA,iBAAA;;cACM,2CAAA,CAAA,iBAAA;;;;AANT,IAAA,iBAAiB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAL7B,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,cADD;AAET,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,kHAAA,CAAA,EAAA,OAFS;;;;AAAA,KAAV,CAK6B,E,uEAGR,2CAAA,CAAA,iBAAA,C,EACF,2CAAA,CAAA,eAAA,C,EACJ,wDAAA,CAAA,iBAAA,C,EACM,2CAAA,CAAA,iBAAA,C,EANQ,CAAA,EAAjB,iBAAiB,CAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNb,QAAa,aAAb,GAEE,yBAAA;AAAA;;AAAA;;AACA;AACQ,WAAA,WAAA,GAAc,uBAAd;AACA,WAAA,IAAA,GAAO,mCAAP;AACA,WAAA,OAAA,GAAU,KAAK,IAAf;;AAER,WAAA,gBAAA,GAAmB;AAAA,eAAM,MAAI,CAAC,OAAX;AAAA,OAAnB;AANiB,KAFnB;;AAAa,IAAA,aAAa,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAHzB,MAAA,CAAA,0CAAA,CAAA,YAAA,CAAA,CAAA,CAAW;AACV,MAAA,UAAU,EAAE;AADF,KAAX,CAGyB,E,yEAAA,CAAA,EAAb,aAAa,CAAb","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot='start'>\\n      <ion-menu-button></ion-menu-button>\\n      <ion-back-button defaultHref='/applications'></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>Chat web app</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-grid>\\n    <ion-row>\\n      <ion-col size='12' size-sm='8' offset-sm='2'>\\n        <ion-card class='ion-padding'>\\n          <ion-card-header>\\n            <ion-card-title class='ion-padding-start'><h1>Welcome to the chat web app</h1></ion-card-title>\\n            <ion-card-subtitle class='ion-padding-start'>A simple chat web app that gets the job done.</ion-card-subtitle>\\n          </ion-card-header>\\n          <ion-card-content>\\n            <ion-list lines='none'>\\n              <ion-item>\\n                <ion-icon name=\\\"checkmark\\\"></ion-icon>\\n                <ion-label>Simple to use</ion-label>\\n              </ion-item>\\n              <ion-item>\\n                <ion-icon name=\\\"checkmark\\\"></ion-icon>\\n                <ion-label>Features that you would actually use</ion-label>\\n              </ion-item>\\n              <ion-item>\\n                <ion-icon name=\\\"checkmark\\\"></ion-icon>\\n                <ion-label>Simple design</ion-label>\\n              </ion-item>\\n              <ion-item>\\n                <ion-icon name=\\\"checkmark\\\"></ion-icon>\\n                <ion-label>No shady stuff in the background</ion-label>\\n              </ion-item>\\n            </ion-list>\\n          </ion-card-content>\\n        </ion-card>\\n      </ion-col>\\n    </ion-row>\\n    <ion-row>\\n      <ion-col size='12' size-sm='8' offset-sm='2'>\\n        <ion-card class=\\\"ion-padding\\\">\\n          <ion-card-header>\\n            <ion-card-title class='ion-padding-start'><h1>Start chatting away!</h1></ion-card-title>\\n            <ion-card-subtitle class='ion-padding-start'>\\n              <ion-text color='danger'>Under beta phase!</ion-text>\\n            </ion-card-subtitle>\\n          </ion-card-header>\\n          <ion-card-content>\\n            <ion-buttons class='ion-padding-start'>\\n              <ion-button expand='block' fill='solid' color='primary'\\n              (click)='presentUsernameModal()'\\n              ><ion-icon name=\\\"chatbubbles\\\" slot='start'></ion-icon>\\n              Chat</ion-button>\\n            </ion-buttons>\\n          </ion-card-content>\\n        </ion-card>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\\n\"","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>Sign up</ion-title>\\n    <ion-buttons slot='end'>\\n      <ion-button color='danger' (click)='closeSignUpModal()'><ion-icon name=\\\"close-circle-outline\\\" slot='icon-only'></ion-icon></ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-grid>\\n    <ion-row>\\n      <ion-col size='12' size-sm='8' offset-sm='2'>\\n        <ion-card class='ion-padding'>\\n          \\n          <ion-card-header>\\n            <ion-card-title class='ion-padding-start'>User credentials</ion-card-title>\\n            <ion-card-subtitle class='ion-padding-start'>Please fill out the following credentials to start chatting</ion-card-subtitle>\\n          </ion-card-header>\\n\\n          <ion-card-content>\\n            <form #userCred='ngForm' (ngSubmit)='signUpUser(userCred)'>\\n              <ion-list lines='none'>\\n\\n                <ion-item>\\n                  <ion-label position='floating'>Enter username</ion-label>\\n                  <ion-input\\n                  ngModel\\n                  #username='ngModel'\\n                  name='username'\\n                  clearInput\\n                  minlength='4'\\n                  required\\n                  type='text'\\n                  ></ion-input>\\n                </ion-item>\\n                <ion-item *ngIf='username.invalid && username.touched'>\\n                  <ion-label><ion-text color='danger'><p>Please check your username</p></ion-text></ion-label>\\n                </ion-item>\\n\\n                <ion-item>\\n                  <ion-label position='floating'>Enter password</ion-label>\\n                  <ion-input\\n                  ngModel\\n                  #password1='ngModel'\\n                  name='password1'\\n                  minlength='4'\\n                  type='password'\\n                  required\\n                  clearInput\\n                  ></ion-input>\\n                </ion-item>\\n                <ion-item *ngIf='password1.invalid && password1.touched'>\\n                  <ion-label><ion-text color='danger'><p>Please enter password</p></ion-text></ion-label>\\n                </ion-item>\\n\\n                <ion-item>\\n                  <ion-label position='floating'>Re-enter password</ion-label>\\n                  <ion-input\\n                  ngModel\\n                  #password2='ngModel'\\n                  name='password2'\\n                  minlength='4'\\n                  type='password'\\n                  required\\n                  clearInput\\n                  ></ion-input>\\n                </ion-item>\\n                <ion-item *ngIf='password2.invalid && password2.touched'>\\n                  <ion-label><ion-text color='danger'><p>Please re-enter your password</p></ion-text></ion-label>\\n                </ion-item>\\n\\n                <ion-item *ngIf='password1.value !== password2.value'>\\n                  <ion-label><ion-text color='danger'><p>The entered password do not match</p></ion-text></ion-label>\\n                </ion-item>\\n\\n              </ion-list>\\n              <ion-button color='primary' expand='block' fill='solid' type='submit'>\\n                <ion-icon name=\\\"create\\\" slot='start'></ion-icon>Sign Up</ion-button>\\n            </form>\\n          </ion-card-content>\\n\\n        </ion-card>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\"","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot='end'>\\n      <ion-button color='primary'\\n      expand='block'\\n      fill='solid'\\n      (click)='gotoSignUpPage()'\\n      ><ion-icon name=\\\"create\\\" slot='start'></ion-icon>Sign up</ion-button>\\n      <ion-button color='danger' (click)='closeUsernameModal()'><ion-icon name=\\\"close-circle-outline\\\" slot='icon-only'></ion-icon></ion-button>\\n    </ion-buttons>\\n    <ion-title>Login</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-grid>\\n    <ion-row>\\n      <ion-col size='12' size-sm='8' offset-sm='2'>\\n        <ion-card class='ion-padding-start'>\\n          <ion-card-content>\\n\\n            <form #usernameForm=ngForm (ngSubmit)='usernameFormProcessor(usernameForm)'>\\n\\n              <ion-list lines='none'>\\n                <ion-item>\\n                  <ion-label position='floating'>Enter your username</ion-label>\\n                  <ion-input\\n                  ngModel\\n                  name='username'\\n                  #username=ngModel\\n                  clearInput\\n                  required\\n                  type='text'\\n                  minlength='4'\\n                  ></ion-input>\\n                </ion-item>\\n                <ion-item *ngIf='username.invalid && username.touched'>\\n                  <ion-label><ion-text color='danger'><p>Please enter a valid username</p></ion-text></ion-label>\\n                </ion-item>\\n\\n                <ion-item>\\n                  <ion-label position='floating'>Enter your password</ion-label>\\n                  <ion-input\\n                  ngModel\\n                  #password='ngModel'\\n                  name='password'\\n                  clearInput\\n                  required\\n                  type='password'\\n                  minlength='4'\\n                  ></ion-input>\\n                </ion-item>\\n                <ion-item *ngIf='password.invalid && password.touched'>\\n                  <ion-label><ion-text color='danger'><p>Please enter your password</p></ion-text></ion-label>\\n                </ion-item>\\n                \\n                <ion-button \\n                type='submit'\\n                expand='block'\\n                color='primary'\\n                fill='solid'\\n                >Done</ion-button>\\n              </ion-list>\\n            </form>\\n\\n          </ion-card-content>\\n        </ion-card>\\n      </ion-col>\\n    </ion-row>\\n    <ion-row>\\n      <ion-col size=\\\"12\\\" size-sm=\\\"8\\\" offset-sm=\\\"2\\\">\\n        <ion-card class='ion-padding'>\\n          <ion-card-header>\\n            <ion-card-title class=\\\"ion-padding-start\\\"><h1>\\n              What is this?\\n            </h1></ion-card-title>\\n            <ion-card-subtitle class=\\\"ion-padding-start\\\">\\n              To start chatting you need to have a username so that others can find you online\\n            </ion-card-subtitle>\\n            <ion-card-content>\\n              <ion-list lines='none'>\\n                <ion-item><p>Length of username must be qual to or greater than 4</p></ion-item>\\n                <ion-item><p>Can be alphanumeric</p></ion-item>\\n                <ion-item><p>For now the usernames are not restricted i.e one could take an already existing username. This will be patched once the app leaves beta phase.</p></ion-item>\\n              </ion-list>\\n            </ion-card-content>\\n          </ion-card-header>\\n        </ion-card>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\"","import { Injectable } from '@angular/core';\nimport { CanLoad, Route, UrlSegment, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { UsernameService } from './username.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatPageGuard implements CanLoad {\n\n  constructor(\n    private us: UsernameService,\n    private router: Router\n  ) {}\n\n  canLoad(\n    route: Route,\n    segments: UrlSegment[]): Observable<boolean> | Promise<boolean> | boolean {\n\n      if (!this.us.isUserSet()) {\n        this.router.navigateByUrl('/applications/chat-web-app');\n      }\n\n      return this.us.isUserSet();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Username } from './username';\nimport { SignUp } from '../sign-up/sign-up';\nimport { ServerService } from '../../server.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsernameService {\n\n  constructor(\n    private http: HttpClient,\n    private serverAddress: ServerService\n  ) { }\n  private UserSet = false;\n  private username: Username = {username: ''};\n  public stat: string;\n  private takenUsernames: string[];\n\n  // Authentication of login data\n  authLoginData(data: SignUp) {\n    // const auth = this.http.post<{message: string, status: string}>('http://localhost:3000/auth/user', data)\n    //   .subscribe(response => {\n    //     if (response.status === 'exist&&passcorrect') {\n    //       this.onCorrectCred(response.message, data.username, response.status);\n    //     } else {\n    //       this.onIncorrectCred(response.message, response.status);\n    //     }\n    //   },\n    //   error => {\n    //     console.log('Error');\n    //   },\n    //   () => {\n    //     console.log(this.stat);\n    //   });\n    // return auth;\n    return this.http.post<{message: string, status: string}>(this.serverAddress.getServerAddress() + '/auth/user', data);\n  }\n\n  onCorrectCred(message: string, username: string, status: string) {\n    this.setUsername(username);\n    console.log(message);\n    this.stat = status;\n    console.log(this.stat);\n  }\n\n  onIncorrectCred(message: string, status: string) {\n    console.log(message);\n    this.stat = status;\n  }\n\n  isUserSet() {\n    return this.UserSet;\n  }\n\n  setUser() {\n    this.UserSet = true;\n  }\n\n  setUsername(username: string) {\n    this.username.username = username;\n    this.setUser();\n  }\n\n  getUsername() {\n    return this.username.username;\n  }\n\n  // Pushing username and password to the database\n  signUpUser(data: SignUp) {\n    this.pushUsernameToDatabase(data);\n  }\n\n  pushUsernameToDatabase(signUpData: SignUp) {\n    this.http.post<{message: string}>(this.serverAddress.getServerAddress() + '/push/username', signUpData)\n      .subscribe(message => {\n        console.log(message);\n      });\n  }\n\n  getTakenUsernames = () => {\n    return this.http.get(this.serverAddress.getServerAddress() + '/get/users');\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ChatWebAppPage } from './chat-web-app.page';\nimport { ChatPageGuard } from './chat-page/chat-page.guard';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ChatWebAppPage\n  },\n  {\n    path: 'chat-page',\n    loadChildren: () => import('./chat-page/chat-page.module').then( m => m.ChatPagePageModule),\n    canLoad: [ChatPageGuard]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ChatWebAppPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ChatWebAppPageRoutingModule } from './chat-web-app-routing.module';\n\nimport { ChatWebAppPage } from './chat-web-app.page';\nimport { UsernameComponent } from './username/username.component';\nimport { SignUpComponent } from './sign-up/sign-up.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ChatWebAppPageRoutingModule\n  ],\n  declarations: [ChatWebAppPage, UsernameComponent, SignUpComponent],\n  entryComponents: [UsernameComponent, SignUpComponent]\n})\nexport class ChatWebAppPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcGxpY2F0aW9ucy9jaGF0LXdlYi1hcHAvY2hhdC13ZWItYXBwLnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { AlertController, ModalController } from '@ionic/angular';\nimport { UsernameComponent } from './username/username.component';\n\n@Component({\n  selector: 'app-chat-web-app',\n  templateUrl: './chat-web-app.page.html',\n  styleUrls: ['./chat-web-app.page.scss'],\n})\nexport class ChatWebAppPage implements OnInit {\n\n  constructor(\n    private alertCtl: AlertController,\n    private modalCtl: ModalController\n  ) { }\n\n  ngOnInit() {\n    this.presentWarning();\n  }\n\n  async presentWarning() {\n    const warning = await this.alertCtl.create({\n      header: 'Security warning!',\n      subHeader: 'Please do not use any username or password that you are using currently anywhere else',\n      buttons: [{\n        text: 'Ok',\n        role: 'ok'\n      }]\n    });\n    await warning.present();\n  }\n\n  async presentUsernameModal() {\n    const username = await this.modalCtl.create({\n      component: UsernameComponent\n    });\n    return await username.present();\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcGxpY2F0aW9ucy9jaGF0LXdlYi1hcHAvc2lnbi11cC9zaWduLXVwLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { ModalController, AlertController, ToastController } from '@ionic/angular';\nimport { NgForm } from '@angular/forms';\nimport { SignUp } from './sign-up';\nimport { UsernameService } from '../chat-page/username.service';\n\n@Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.scss'],\n})\nexport class SignUpComponent implements OnInit {\n\n  constructor(\n    private modalCtl: ModalController,\n    private AlertCtl: AlertController,\n    private toastCtl: ToastController,\n    private userSrv: UsernameService\n  ) { }\n  private signUpData: SignUp;\n  private usernameTaken: boolean;\n\n  ngOnInit() {}\n\n  closeSignUpModal() {\n    this.modalCtl.dismiss();\n  }\n\n  // Process user signup data\n  async signUpUser(signUpData: NgForm) {\n    // Check if username is available\n    await this.isUsernameAvailable(signUpData.value.username);\n    if (this.usernameTaken) {\n      console.log('The username is already taken!');\n      return;\n    }\n    // Validate form fields\n    const pass1: string = signUpData.value.password1;\n    const pass2: string = signUpData.value.password2;\n    if ((signUpData.valid && (pass1.length > 3 && pass2.length > 3) && (pass1 === pass2)) === false) {\n      // Alert to check credentials\n      this.checkCredentialAlert();\n      return;\n    }\n    // Pass data to the database\n    this.signUpData = {\n      username: signUpData.value.username,\n      password: signUpData.value.password1\n    };\n    this.userSrv.signUpUser(this.signUpData);\n    // After passing data to the database\n    signUpData.resetForm();\n    this.modalCtl.dismiss();\n    this.successfullToast();\n  }\n\n  async checkCredentialAlert() {\n    const checkCred = await this.AlertCtl.create({\n      header: 'Error',\n      subHeader: 'Please check your credentials',\n      buttons: [{\n        text: 'Ok',\n        role: 'ok'\n      }],\n      translucent: true\n    });\n    return await checkCred.present();\n  }\n\n  async successfullToast() {\n    const success = await this.toastCtl.create({\n      message: 'Sign up successfull! Now you can login to start chatting!',\n      color: 'primary',\n      duration: 2000\n    });\n    success.present();\n  }\n\n  async isUsernameAvailable(username: string) {\n    // Fetch taken usernames\n    this.userSrv.getTakenUsernames().subscribe(taken => {\n      this.usernameTaken = taken.toString().split(',').includes(username);\n    }, error => console.log('Some error occured while fetching usernames', error));\n    return this.usernameTaken;\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcGxpY2F0aW9ucy9jaGF0LXdlYi1hcHAvdXNlcm5hbWUvdXNlcm5hbWUuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { ModalController, NavController, ToastController, AlertController } from '@ionic/angular';\nimport { NgForm } from '@angular/forms';\nimport { UsernameService } from '../chat-page/username.service';\nimport { SignUpComponent } from '../sign-up/sign-up.component';\n\n@Component({\n  selector: 'app-username',\n  templateUrl: './username.component.html',\n  styleUrls: ['./username.component.scss'],\n})\nexport class UsernameComponent implements OnInit {\n\n  constructor(\n    private modalCtl: ModalController,\n    private navCtl: NavController,\n    private us: UsernameService,\n    private toastCtl: ToastController\n  ) { }\n  private users: {_id: string, username: string}[];\n\n  public usernameExists = false;\n  private authStat = false;\n\n  ngOnInit() {}\n\n  closeUsernameModal = () => this.modalCtl.dismiss();\n\n  usernameFormProcessor(usernameData: NgForm) {\n    // // Check if the user already exists\n    // if (this.checkValidUsername(usernameData.value.username)) {\n    //   this.usernameExists = true;\n    //   usernameData.resetForm();\n    //   return;\n    // }\n\n    // // Add user and proceed to page\n    // if (this.usernameValidator(usernameData.value.username)) {\n    //   this.proceedToPage(usernameData.value.username);\n    // } else {\n    //   return;\n    // }\n\n    if (usernameData.invalid) {\n      return;\n    }\n\n    const usr = usernameData.value.username;\n    const pass = usernameData.value.password;\n\n    this.us.authLoginData({\n      username: usr,\n      password: pass\n    }).subscribe(response => {\n      if (response.status === 'exist&&passcorrect') {\n        this.us.onCorrectCred(response.message, usr, response.status);\n      } else {\n        this.us.onIncorrectCred(response.message, response.status);\n      }\n    },\n    error => {\n      console.log('There was some error authenticating', error);\n    },\n    () => {\n      // Proceed accordingly\n      if (this.us.stat !== 'exist&&passcorrect') {\n        this.wrongCredToast();\n      } else {\n        this.proceedToPage(usr);\n      }\n    });\n\n    usernameData.resetForm();\n  }\n\n  proceedToPage(username: string) {\n    this.us.setUsername(username);\n    this.modalCtl.dismiss();\n    this.us.setUser();\n    this.navCtl.navigateForward('/applications/chat-web-app/chat-page');\n  }\n\n  // Signup page segment\n  gotoSignUpPage() {\n    this.modalCtl.dismiss();\n    this.signUpPageModal();\n  }\n\n  async signUpPageModal() {\n    const signUp = await this.modalCtl.create({\n      component: SignUpComponent\n    });\n    return await signUp.present();\n  }\n\n  async wrongCredToast() {\n    const wrongCredToast = await this.toastCtl.create({\n      message: 'Incorrect user credentials. Please check your user name and password and try again',\n      duration: 2000,\n      color: 'danger',\n      translucent: true\n    });\n    wrongCredToast.present();\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServerService {\n\n  constructor() { }\n  // Server address to use\n  private development = 'http://localhost:3000';\n  private prod = 'https://backstab319.herokuapp.com';\n  private address = this.prod;\n\n  getServerAddress = () => this.address;\n}\n"],"sourceRoot":"webpack:///","file":"chat-web-app-chat-web-app-module-es5.js"}