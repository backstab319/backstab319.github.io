{"version":3,"sources":["src/app/applications/chat-web-app/chat-page/chat-page.page.html","src/app/applications/chat-web-app/chat-page/inbox/inbox.component.html","src/app/applications/chat-web-app/chat-page/options/options.component.html","src/app/applications/chat-web-app/chat-page/people/people.component.html","src/app/applications/chat-web-app/chat-page/chat-page-routing.module.ts","src/app/applications/chat-web-app/chat-page/chat-page.module.ts","src/app/applications/chat-web-app/chat-page/chat-page.page.scss","src/app/applications/chat-web-app/chat-page/chat-page.page.ts","src/app/applications/chat-web-app/chat-page/chat.service.ts","src/app/applications/chat-web-app/chat-page/inbox/inbox.component.scss","src/app/applications/chat-web-app/chat-page/inbox/inbox.component.ts","src/app/applications/chat-web-app/chat-page/inbox/inbox.guard.ts","src/app/applications/chat-web-app/chat-page/inbox/inbox.service.ts","src/app/applications/chat-web-app/chat-page/options/options.component.scss","src/app/applications/chat-web-app/chat-page/options/options.component.ts","src/app/applications/chat-web-app/chat-page/people/people.component.scss","src/app/applications/chat-web-app/chat-page/people/people.component.ts","src/app/applications/chat-web-app/chat-page/write-page/write.guard.ts","src/app/applications/chat-web-app/chat-page/write-page/write.service.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot='start'>\\n      <ion-menu-button></ion-menu-button>\\n      <ion-back-button defaultHref='/applications/chat-web-app'></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>Chat</ion-title>\\n    <ion-buttons slot='end'>\\n      <!-- <ion-button\\n      expand='block'\\n      color='primary'\\n      fill='outline'\\n      (click)='showPeopleModal()'>\\n      <ion-icon name=\\\"person\\\" slot='start'></ion-icon>\\n        People\\n      </ion-button> -->\\n      <ion-button\\n      (click)='showOptions($event)'\\n      color='primary'\\n      ><ion-icon name=\\\"settings\\\" slot='start'></ion-icon>Options</ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-grid>\\n    <ion-row>\\n      <ion-col size='12' size-sm='8' offset-sm='2'>\\n        <ion-card class='ion-padding'>\\n          <ion-card-header>\\n            <ion-card-title class='ion-padding-start'>Feature being worked on</ion-card-title>\\n            <ion-card-subtitle class='ion-padding-start'>This part of the application is being developed. More features are being added.</ion-card-subtitle>\\n          </ion-card-header>\\n          <ion-card-content>\\n            <ion-list lines='none'>\\n              <ion-list-header>The following features are being added</ion-list-header>\\n              <ion-item>\\n                <ion-icon name=\\\"eye\\\" slot='start'></ion-icon>\\n                <ion-label><p>Ability to find other people to connect to</p></ion-label>\\n              </ion-item>\\n              <ion-item>\\n                <ion-icon name=\\\"person-add\\\" slot='start'></ion-icon>\\n                <ion-label><p>Being able to add friends</p></ion-label>\\n              </ion-item>\\n              <ion-item>\\n                <ion-icon name=\\\"chatbubbles\\\" slot='start'></ion-icon>\\n                <ion-label><p>Being able to send message</p></ion-label>\\n              </ion-item>\\n              <ion-item>\\n                <ion-icon name=\\\"chatbubbles\\\" slot='start'></ion-icon>\\n                <ion-label><p>Being able to chat in real time</p></ion-label>\\n              </ion-item>\\n            </ion-list>\\n          </ion-card-content>\\n        </ion-card>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\\n\"","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot='start'>\\n      <ion-menu-button></ion-menu-button>\\n      <ion-back-button defaultHref='/applications/chat-web-app/chat-page'></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>Inbox</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-grid>\\n    <ion-row>\\n      <ion-col size='12' size-sm='8' offset-sm='2'>\\n        <ion-card class='ion-padding' *ngFor='let i of messages'>\\n          <ion-card-header>\\n            <ion-card-title class='ion-padding-start'>Sender: {{ i.senderName }}</ion-card-title>\\n            <ion-card-subtitle class='ion-padding-start'>Sent on {{i.messageDate}} at {{i.messageTime}} </ion-card-subtitle>\\n          </ion-card-header>\\n          <ion-card-content>\\n            <p class='ion-padding-start'>{{ i.messageBody }}</p>\\n          </ion-card-content>\\n        </ion-card>\\n\\n        <ion-card class='ion-padding' *ngIf='!this.messagesInInbox'>\\n          <ion-card-header>\\n            <ion-card-title class='ion-padding-start'>You dont have any messages</ion-card-title>\\n            <ion-card-subtitle class='ion-padding-start'>If you have any messages then they will appear here</ion-card-subtitle>\\n          </ion-card-header>\\n        </ion-card>\\n\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\"","export default \"<ion-list lines='none'>\\n  <ion-item button (click)=\\\"gotoPage('inbox')\\\">\\n    <ion-icon name=\\\"mail\\\" slot='start' color='primary'></ion-icon>\\n    <ion-label>Inbox</ion-label>\\n  </ion-item>\\n  <ion-item button (click)=\\\"gotoPage('people')\\\">\\n    <ion-icon name=\\\"people\\\" slot='start' color='primary'></ion-icon>\\n    <ion-label>People</ion-label>\\n  </ion-item>\\n  <ion-item button (click)=\\\"logOut()\\\">\\n    <ion-icon name=\\\"log-out\\\" slot='start' color='primary'></ion-icon>\\n    <ion-label>Logout</ion-label>\\n  </ion-item>\\n</ion-list>\"","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>People</ion-title>\\n    <ion-buttons slot='end'>\\n      <ion-button (click)='closePeopleModal()' color='danger'><ion-icon name=\\\"close-circle-outline\\\" slot='icon-only'></ion-icon></ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-grid>\\n    <ion-row>\\n      <ion-col size='12' size-sm='8' offset-sm='2'>\\n        <ion-card class='ion-padding'>\\n          <ion-card-content>\\n            <ion-list lines='none' *ngFor='let i of users'>\\n              <ion-item>\\n                <ion-label>{{ i.username }}</ion-label>\\n                <ion-buttons slot='end'>\\n                  <ion-button\\n                  color='primary'\\n                  (click)='redirectToWriteMessage(i._id, i.username)'\\n                  ><ion-icon name=\\\"chatbubbles\\\" slot='icon-only'></ion-icon></ion-button>\\n                </ion-buttons>\\n              </ion-item>\\n            </ion-list>\\n          </ion-card-content>\\n        </ion-card>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ChatPagePage } from './chat-page.page';\nimport { WriteGuard } from './write-page/write.guard';\nimport { InboxComponent } from './inbox/inbox.component';\nimport { InboxGuard } from './inbox/inbox.guard';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ChatPagePage\n  },\n  {\n    path: 'write-page',\n    loadChildren: () => import('./write-page/write-page.module').then( m => m.WritePagePageModule),\n    canLoad: [WriteGuard]\n  },\n  {\n    path: 'inbox-page',\n    component: InboxComponent,\n    canLoad: [InboxGuard]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ChatPagePageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ChatPagePageRoutingModule } from './chat-page-routing.module';\n\nimport { ChatPagePage } from './chat-page.page';\nimport { HttpClientModule } from '@angular/common/http';\nimport { PeopleComponent } from './people/people.component';\nimport { OptionsComponent } from './options/options.component';\nimport { InboxComponent } from './inbox/inbox.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ChatPagePageRoutingModule,\n    HttpClientModule\n  ],\n  declarations: [ChatPagePage, PeopleComponent, OptionsComponent, InboxComponent],\n  entryComponents: [PeopleComponent, OptionsComponent]\n})\nexport class ChatPagePageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcGxpY2F0aW9ucy9jaGF0LXdlYi1hcHAvY2hhdC1wYWdlL2NoYXQtcGFnZS5wYWdlLnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { ToastController, ModalController, PopoverController } from '@ionic/angular';\nimport { UsernameService } from './username.service';\nimport { ChatService } from './chat.service';\nimport { OptionsComponent } from './options/options.component';\n\n@Component({\n  selector: 'app-chat-page',\n  templateUrl: './chat-page.page.html',\n  styleUrls: ['./chat-page.page.scss'],\n})\nexport class ChatPagePage implements OnInit {\n\n  constructor(\n    private toastCtl: ToastController,\n    private us: UsernameService,\n    private chat: ChatService,\n    private popCtl: PopoverController\n  ) { }\n  private username: string;\n\n  ngOnInit() {\n    // Getting the username before popping the toast\n    this.username = this.us.getUsername();\n    this.welcomeToast();\n  }\n\n  async welcomeToast() {\n    const welcomeToast = await this.toastCtl.create({\n      message: 'Welcome ' + this.username,\n      duration: 2000,\n      color: 'primary',\n      buttons: [{\n        icon: 'close',\n        role: 'cancel'\n      }]\n    });\n    welcomeToast.present();\n  }\n\n  async showOptions(ev: any) {\n    const options = await this.popCtl.create({\n      component: OptionsComponent,\n      event: ev,\n      translucent: true\n    });\n    return await options.present();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport { UsernameService } from './username.service';\nimport { ServerService } from '../../server.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService {\n\n  constructor(\n    private http: HttpClient,\n    private userSrv: UsernameService,\n    private serverAddress: ServerService\n  ) { }\n  private usersData: any;\n  private updatedUsers = new Subject<[]>();\n\n  getUsers() {\n    this.http.post(this.serverAddress.getServerAddress() + '/get/usersandid', {username: this.userSrv.getUsername()})\n      .subscribe(users => {\n        console.log(users);\n        this.usersData = users;\n        this.updatedUsers.next(this.usersData);\n    });\n  }\n\n  getUpdatedUsers() {\n    return this.updatedUsers.asObservable();\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcGxpY2F0aW9ucy9jaGF0LXdlYi1hcHAvY2hhdC1wYWdlL2luYm94L2luYm94LmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { InboxService } from './inbox.service';\nimport { Message } from '../write-page/message';\n\n@Component({\n  selector: 'app-inbox',\n  templateUrl: './inbox.component.html',\n  styleUrls: ['./inbox.component.scss'],\n})\nexport class InboxComponent implements OnInit, OnDestroy {\n\n  constructor(\n    private inboxSrv: InboxService\n  ) { }\n  public messages: Message[];\n  public messagesInInbox = true;\n  private inboxServiceRunner;\n\n  ngOnInit() {\n    // Subscription to update messages automatically\n    this.inboxSrv.getMessages();\n    this.inboxSrv.getUpdatedMessages()\n      .subscribe(letter => {\n        this.messages = letter;\n        if (letter.length < 1) {\n          this.messagesInInbox = false;\n        }\n      });\n    // Get new messages if any every 5 seconds\n    this.inboxServiceRunner = setInterval(() => {\n      this.inboxSrv.getMessages();\n    }, 5000);\n  }\n\n  ngOnDestroy() {\n    if (this.inboxServiceRunner) {\n      clearInterval(this.inboxServiceRunner);\n    }\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { CanLoad, Route, UrlSegment, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { UsernameService } from '../username.service';\nimport { NavController } from '@ionic/angular';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InboxGuard implements CanLoad {\n\n  constructor(\n    private username: UsernameService,\n    private navCtl: NavController\n  ) {}\n\n  canLoad(\n    route: Route,\n    segments: UrlSegment[]): Observable<boolean> | Promise<boolean> | boolean {\n\n      if (!this.username.isUserSet()) {\n        this.navCtl.navigateBack('/applications/chat-web-app');\n      }\n      return this.username.isUserSet();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UsernameService } from '../username.service';\nimport { Message } from '../write-page/message';\nimport { Subject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { ServerService } from 'src/app/applications/server.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InboxService {\n\n  constructor(\n    private username: UsernameService,\n    private http: HttpClient,\n    private serverAddress: ServerService\n  ) { }\n  private messages: Message[];\n  private updatedMessages = new Subject<Message[]>();\n\n  // Returns the messages\n  getMessages() {\n    // tslint:disable-next-line: max-line-length\n    this.http.post<{message: Message[], statusCode: string}>(this.serverAddress.getServerAddress() + '/pull/message', {username: this.username.getUsername()})\n      .subscribe(res => {\n        this.messages = res.message;\n        this.updatedMessages.next(this.messages);\n      });\n  }\n\n  // Put message\n  // A letter is a single message with the name of sender and receiver\n  putMessages = (letter: Message) => {\n    this.messages.push(letter);\n    // Call subject to update\n    this.updatedMessages.next([...this.messages]);\n  }\n\n  getUpdatedMessages = () => this.updatedMessages.asObservable();\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcGxpY2F0aW9ucy9jaGF0LXdlYi1hcHAvY2hhdC1wYWdlL29wdGlvbnMvb3B0aW9ucy5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { NavController, ModalController, PopoverController, AlertController, ToastController } from '@ionic/angular';\nimport { PeopleComponent } from '../people/people.component';\nimport { UsernameService } from '../username.service';\n\n@Component({\n  selector: 'app-options',\n  templateUrl: './options.component.html',\n  styleUrls: ['./options.component.scss'],\n})\nexport class OptionsComponent implements OnInit {\n\n  constructor(\n    private navCtl: NavController,\n    private modal: ModalController,\n    private popover: PopoverController,\n    private userSrv: UsernameService,\n    private alertCtl: AlertController,\n    private toastCtl: ToastController\n  ) { }\n\n  ngOnInit() {}\n\n  gotoPage(pageName: string) {\n    // Show people modal\n    if (pageName === 'people') {\n      this.popover.dismiss();\n      this.showPeopleModal();\n    }\n\n    // Goto inbox page\n    if (pageName === 'inbox') {\n      this.popover.dismiss();\n      this.navCtl.navigateForward('/applications/chat-web-app/chat-page/inbox-page');\n    }\n  }\n\n  logOut() {\n    this.showLogoutAlert();\n  }\n\n  async showLogoutAlert() {\n    this.popover.dismiss();\n    const logoutAlert = await this.alertCtl.create({\n      header: 'Logout',\n      subHeader: 'Are you sure?',\n      buttons: [\n        {\n          text: 'Yes',\n          role: 'yes',\n          handler: async () => {\n            // Destroy username\n            this.userSrv.setUsername('');\n            // Show the logged out toast\n            await this.showLoggedOutToast();\n            // Redirect to applications page after 1 second\n            this.navCtl.navigateBack('/applications');\n          }\n        },\n        {\n          text: 'No',\n          role: 'no'\n        }\n      ]\n    });\n    await logoutAlert.present();\n  }\n\n  async showLoggedOutToast() {\n    const loggedOutToast = await this.toastCtl.create({\n      message: 'Successfully logged out! Please wait while we redirect you',\n      color: 'primary',\n      duration: 1000\n    });\n    loggedOutToast.present();\n  }\n\n  async showPeopleModal() {\n    const peopleModal = await this.modal.create({\n      component: PeopleComponent\n    });\n    return await peopleModal.present();\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcGxpY2F0aW9ucy9jaGF0LXdlYi1hcHAvY2hhdC1wYWdlL3Blb3BsZS9wZW9wbGUuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { ChatService } from '../chat.service';\nimport { ModalController, NavController } from '@ionic/angular';\nimport { WriteService } from '../write-page/write.service';\nimport { UsernameService } from '../username.service';\n\n@Component({\n  selector: 'app-people',\n  templateUrl: './people.component.html',\n  styleUrls: ['./people.component.scss'],\n})\nexport class PeopleComponent implements OnInit {\n\n  constructor(\n    private chat: ChatService,\n    private modal: ModalController,\n    private navCtl: NavController,\n    private writeSrv: WriteService,\n    private username: UsernameService\n  ) { }\n  public users: [];\n\n  ngOnInit() {\n    // Get updated users via subject\n    this.chat.getUsers();\n    this.chat.getUpdatedUsers().subscribe(users => {\n      this.users = users;\n      console.log(this.users);\n    });\n  }\n\n  // executeOnceFuntion() {\n  //   const index = this.users.findIndex(x => {\n  //     return x.username === this.username.getUsername();\n  //   });\n  //   this.users.splice(index, 1);\n  //   this.executeOnce = false;\n  //   return;\n  // }\n\n  closePeopleModal = () => {\n    this.modal.dismiss();\n  }\n\n  redirectToWriteMessage(receiverId: string, receiverName: string) {\n    this.closePeopleModal();\n    // Write service code here\n    this.writeSrv.setReceiverDetails(receiverId, receiverName);\n    // Redirect to write page\n    this.navCtl.navigateForward('/applications/chat-web-app/chat-page/write-page');\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { CanLoad, Route, UrlSegment, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { WriteService } from './write.service';\nimport { NavController } from '@ionic/angular';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WriteGuard implements CanLoad {\n\n  constructor(\n    private writeSrv: WriteService,\n    private navCtl: NavController\n  ) {}\n\n  canLoad(\n    route: Route,\n    segments: UrlSegment[]): Observable<boolean> | Promise<boolean> | boolean {\n\n      if (!this.writeSrv.isReceiverSet()) {\n        this.navCtl.navigateBack('/applications/chat-web-app');\n      }\n\n      return this.writeSrv.isReceiverSet();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Message } from './message';\nimport { HttpClient } from '@angular/common/http';\nimport { InboxService } from '../inbox/inbox.service';\nimport { ServerService } from 'src/app/applications/server.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WriteService {\n\n  constructor(\n    private http: HttpClient,\n    private inboxSrv: InboxService,\n    private serverAddress: ServerService\n  ) { }\n  private receiverDetails: {\n    receiverId: string,\n    receiverName: string\n  };\n\n  setReceiverDetails(id: string, name: string) {\n    this.receiverDetails = {receiverId: id, receiverName: name};\n  }\n\n  getReceiverDetails() {\n    return this.receiverDetails;\n  }\n\n  isReceiverSet() {\n    return this.receiverDetails.receiverName.length > 0;\n  }\n\n  // Push message to the database\n  sendMessage(message: Message) {\n    this.http.post<{res: string}>(this.serverAddress.getServerAddress() + '/push/message', message)\n      .subscribe(val => {\n        console.log(val.res);\n      });\n    // View message subject here to view message as they come i.e refresh inbox when new message is sent\n    this.inboxSrv.getMessages();\n  }\n}\n"],"sourceRoot":"webpack:///","file":"chat-page-chat-page-module-es5.js"}