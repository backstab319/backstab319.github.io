{"version":3,"sources":["./src/app/applications/chat-web-app/chat-web-app.page.html","./src/app/applications/chat-web-app/sign-up/sign-up.component.html","./src/app/applications/chat-web-app/username/username.component.html","./src/app/applications/chat-web-app/chat-page/chat-page.guard.ts","./src/app/applications/chat-web-app/chat-page/username.service.ts","./src/app/applications/chat-web-app/chat-web-app-routing.module.ts","./src/app/applications/chat-web-app/chat-web-app.module.ts","./src/app/applications/chat-web-app/chat-web-app.page.scss","./src/app/applications/chat-web-app/chat-web-app.page.ts","./src/app/applications/chat-web-app/sign-up/sign-up.component.scss","./src/app/applications/chat-web-app/sign-up/sign-up.component.ts","./src/app/applications/chat-web-app/username/username.component.scss","./src/app/applications/chat-web-app/username/username.component.ts","./src/app/applications/server.service.ts"],"names":[],"mappings":"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","file":"chat-web-app-chat-web-app-module-es2015.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot='start'>\\n      <ion-menu-button></ion-menu-button>\\n      <ion-back-button defaultHref='/applications'></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>Chat web app</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-grid>\\n    <ion-row>\\n      <ion-col size='12' size-sm='8' offset-sm='2'>\\n        <ion-card class='ion-padding'>\\n          <ion-card-header>\\n            <ion-card-title class='ion-padding-start'><h1>Welcome to the chat web app</h1></ion-card-title>\\n            <ion-card-subtitle class='ion-padding-start'>A simple chat web app that gets the job done.</ion-card-subtitle>\\n          </ion-card-header>\\n          <ion-card-content>\\n            <ion-list lines='none'>\\n              <ion-item>\\n                <ion-icon name=\\\"checkmark\\\"></ion-icon>\\n                <ion-label>Simple to use</ion-label>\\n              </ion-item>\\n              <ion-item>\\n                <ion-icon name=\\\"checkmark\\\"></ion-icon>\\n                <ion-label>Features that you would actually use</ion-label>\\n              </ion-item>\\n              <ion-item>\\n                <ion-icon name=\\\"checkmark\\\"></ion-icon>\\n                <ion-label>Simple design</ion-label>\\n              </ion-item>\\n              <ion-item>\\n                <ion-icon name=\\\"checkmark\\\"></ion-icon>\\n                <ion-label>No shady stuff in the background</ion-label>\\n              </ion-item>\\n            </ion-list>\\n          </ion-card-content>\\n        </ion-card>\\n      </ion-col>\\n    </ion-row>\\n    <ion-row>\\n      <ion-col size='12' size-sm='8' offset-sm='2'>\\n        <ion-card class=\\\"ion-padding\\\">\\n          <ion-card-header>\\n            <ion-card-title class='ion-padding-start'><h1>Start chatting away!</h1></ion-card-title>\\n            <ion-card-subtitle class='ion-padding-start'>\\n              <ion-text color='danger'>Under beta phase!</ion-text>\\n            </ion-card-subtitle>\\n          </ion-card-header>\\n          <ion-card-content>\\n            <ion-buttons class='ion-padding-start'>\\n              <ion-button expand='block' fill='solid' color='primary'\\n              (click)='presentUsernameModal()'\\n              ><ion-icon name=\\\"chatbubbles\\\" slot='start'></ion-icon>\\n              Chat</ion-button>\\n            </ion-buttons>\\n          </ion-card-content>\\n        </ion-card>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\\n\"","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>Sign up</ion-title>\\n    <ion-buttons slot='end'>\\n      <ion-button color='danger' (click)='closeSignUpModal()'><ion-icon name=\\\"close-circle-outline\\\" slot='icon-only'></ion-icon></ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-grid>\\n    <ion-row>\\n      <ion-col size='12' size-sm='8' offset-sm='2'>\\n        <ion-card class='ion-padding'>\\n          \\n          <ion-card-header>\\n            <ion-card-title class='ion-padding-start'>User credentials</ion-card-title>\\n            <ion-card-subtitle class='ion-padding-start'>Please fill out the following credentials to start chatting</ion-card-subtitle>\\n          </ion-card-header>\\n\\n          <ion-card-content>\\n            <form #userCred='ngForm' (ngSubmit)='signUpUser(userCred)'>\\n              <ion-list lines='none'>\\n\\n                <ion-item>\\n                  <ion-label position='floating'>Enter username</ion-label>\\n                  <ion-input\\n                  ngModel\\n                  #username='ngModel'\\n                  name='username'\\n                  clearInput\\n                  minlength='4'\\n                  required\\n                  type='text'\\n                  ></ion-input>\\n                </ion-item>\\n                <ion-item *ngIf='username.invalid && username.touched'>\\n                  <ion-label><ion-text color='danger'><p>Please check your username</p></ion-text></ion-label>\\n                </ion-item>\\n\\n                <ion-item>\\n                  <ion-label position='floating'>Enter password</ion-label>\\n                  <ion-input\\n                  ngModel\\n                  #password1='ngModel'\\n                  name='password1'\\n                  minlength='4'\\n                  type='password'\\n                  required\\n                  clearInput\\n                  ></ion-input>\\n                </ion-item>\\n                <ion-item *ngIf='password1.invalid && password1.touched'>\\n                  <ion-label><ion-text color='danger'><p>Please enter password</p></ion-text></ion-label>\\n                </ion-item>\\n\\n                <ion-item>\\n                  <ion-label position='floating'>Re-enter password</ion-label>\\n                  <ion-input\\n                  ngModel\\n                  #password2='ngModel'\\n                  name='password2'\\n                  minlength='4'\\n                  type='password'\\n                  required\\n                  clearInput\\n                  ></ion-input>\\n                </ion-item>\\n                <ion-item *ngIf='password2.invalid && password2.touched'>\\n                  <ion-label><ion-text color='danger'><p>Please re-enter your password</p></ion-text></ion-label>\\n                </ion-item>\\n\\n                <ion-item *ngIf='password1.value !== password2.value'>\\n                  <ion-label><ion-text color='danger'><p>The entered password do not match</p></ion-text></ion-label>\\n                </ion-item>\\n\\n              </ion-list>\\n              <ion-button color='primary' expand='block' fill='solid' type='submit'>\\n                <ion-icon name=\\\"create\\\" slot='start'></ion-icon>Sign Up</ion-button>\\n            </form>\\n          </ion-card-content>\\n\\n        </ion-card>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\"","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot='end'>\\n      <ion-button color='primary'\\n      expand='block'\\n      fill='solid'\\n      (click)='gotoSignUpPage()'\\n      ><ion-icon name=\\\"create\\\" slot='start'></ion-icon>Sign up</ion-button>\\n      <ion-button color='danger' (click)='closeUsernameModal()'><ion-icon name=\\\"close-circle-outline\\\" slot='icon-only'></ion-icon></ion-button>\\n    </ion-buttons>\\n    <ion-title>Login</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-grid>\\n    <ion-row>\\n      <ion-col size='12' size-sm='8' offset-sm='2'>\\n        <ion-card class='ion-padding-start'>\\n          <ion-card-content>\\n\\n            <form #usernameForm=ngForm (ngSubmit)='usernameFormProcessor(usernameForm)'>\\n\\n              <ion-list lines='none'>\\n                <ion-item>\\n                  <ion-label position='floating'>Enter your username</ion-label>\\n                  <ion-input\\n                  ngModel\\n                  name='username'\\n                  #username=ngModel\\n                  clearInput\\n                  required\\n                  type='text'\\n                  minlength='4'\\n                  ></ion-input>\\n                </ion-item>\\n                <ion-item *ngIf='username.invalid && username.touched'>\\n                  <ion-label><ion-text color='danger'><p>Please enter a valid username</p></ion-text></ion-label>\\n                </ion-item>\\n\\n                <ion-item>\\n                  <ion-label position='floating'>Enter your password</ion-label>\\n                  <ion-input\\n                  ngModel\\n                  #password='ngModel'\\n                  name='password'\\n                  clearInput\\n                  required\\n                  type='password'\\n                  minlength='4'\\n                  ></ion-input>\\n                </ion-item>\\n                <ion-item *ngIf='password.invalid && password.touched'>\\n                  <ion-label><ion-text color='danger'><p>Please enter your password</p></ion-text></ion-label>\\n                </ion-item>\\n                \\n                <ion-button \\n                type='submit'\\n                expand='block'\\n                color='primary'\\n                fill='solid'\\n                >Done</ion-button>\\n              </ion-list>\\n            </form>\\n\\n          </ion-card-content>\\n        </ion-card>\\n      </ion-col>\\n    </ion-row>\\n    <ion-row>\\n      <ion-col size=\\\"12\\\" size-sm=\\\"8\\\" offset-sm=\\\"2\\\">\\n        <ion-card class='ion-padding'>\\n          <ion-card-header>\\n            <ion-card-title class=\\\"ion-padding-start\\\"><h1>\\n              What is this?\\n            </h1></ion-card-title>\\n            <ion-card-subtitle class=\\\"ion-padding-start\\\">\\n              To start chatting you need to have a username so that others can find you online\\n            </ion-card-subtitle>\\n            <ion-card-content>\\n              <ion-list lines='none'>\\n                <ion-item><p>Length of username must be qual to or greater than 4</p></ion-item>\\n                <ion-item><p>Can be alphanumeric</p></ion-item>\\n                <ion-item><p>For now the usernames are not restricted i.e one could take an already existing username. This will be patched once the app leaves beta phase.</p></ion-item>\\n              </ion-list>\\n            </ion-card-content>\\n          </ion-card-header>\\n        </ion-card>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\"","import { Injectable } from '@angular/core';\nimport { CanLoad, Route, UrlSegment, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { UsernameService } from './username.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatPageGuard implements CanLoad {\n\n  constructor(\n    private us: UsernameService,\n    private router: Router\n  ) {}\n\n  canLoad(\n    route: Route,\n    segments: UrlSegment[]): Observable<boolean> | Promise<boolean> | boolean {\n\n      if (!this.us.isUserSet()) {\n        this.router.navigateByUrl('/applications/chat-web-app');\n      }\n\n      return this.us.isUserSet();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Username } from './username';\nimport { SignUp } from '../sign-up/sign-up';\nimport { ServerService } from '../../server.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsernameService {\n\n  constructor(\n    private http: HttpClient,\n    private serverAddress: ServerService\n  ) { }\n  private UserSet = false;\n  private username: Username = {username: ''};\n  public stat: string;\n  private takenUsernames: string[];\n\n  // Authentication of login data\n  authLoginData(data: SignUp) {\n    // const auth = this.http.post<{message: string, status: string}>('http://localhost:3000/auth/user', data)\n    //   .subscribe(response => {\n    //     if (response.status === 'exist&&passcorrect') {\n    //       this.onCorrectCred(response.message, data.username, response.status);\n    //     } else {\n    //       this.onIncorrectCred(response.message, response.status);\n    //     }\n    //   },\n    //   error => {\n    //     console.log('Error');\n    //   },\n    //   () => {\n    //     console.log(this.stat);\n    //   });\n    // return auth;\n    return this.http.post<{message: string, status: string}>(this.serverAddress.getServerAddress() + '/auth/user', data);\n  }\n\n  onCorrectCred(message: string, username: string, status: string) {\n    this.setUsername(username);\n    console.log(message);\n    this.stat = status;\n    console.log(this.stat);\n  }\n\n  onIncorrectCred(message: string, status: string) {\n    console.log(message);\n    this.stat = status;\n  }\n\n  isUserSet() {\n    return this.UserSet;\n  }\n\n  setUser() {\n    this.UserSet = true;\n  }\n\n  setUsername(username: string) {\n    this.username.username = username;\n    this.setUser();\n  }\n\n  getUsername() {\n    return this.username.username;\n  }\n\n  // Pushing username and password to the database\n  signUpUser(data: SignUp) {\n    this.pushUsernameToDatabase(data);\n  }\n\n  pushUsernameToDatabase(signUpData: SignUp) {\n    this.http.post<{message: string}>(this.serverAddress.getServerAddress() + '/push/username', signUpData)\n      .subscribe(message => {\n        console.log(message);\n      });\n  }\n\n  getTakenUsernames = () => {\n    return this.http.get(this.serverAddress.getServerAddress() + '/get/users');\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ChatWebAppPage } from './chat-web-app.page';\nimport { ChatPageGuard } from './chat-page/chat-page.guard';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ChatWebAppPage\n  },\n  {\n    path: 'chat-page',\n    loadChildren: () => import('./chat-page/chat-page.module').then( m => m.ChatPagePageModule),\n    canLoad: [ChatPageGuard]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ChatWebAppPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ChatWebAppPageRoutingModule } from './chat-web-app-routing.module';\n\nimport { ChatWebAppPage } from './chat-web-app.page';\nimport { UsernameComponent } from './username/username.component';\nimport { SignUpComponent } from './sign-up/sign-up.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ChatWebAppPageRoutingModule\n  ],\n  declarations: [ChatWebAppPage, UsernameComponent, SignUpComponent],\n  entryComponents: [UsernameComponent, SignUpComponent]\n})\nexport class ChatWebAppPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcGxpY2F0aW9ucy9jaGF0LXdlYi1hcHAvY2hhdC13ZWItYXBwLnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { AlertController, ModalController } from '@ionic/angular';\nimport { UsernameComponent } from './username/username.component';\n\n@Component({\n  selector: 'app-chat-web-app',\n  templateUrl: './chat-web-app.page.html',\n  styleUrls: ['./chat-web-app.page.scss'],\n})\nexport class ChatWebAppPage implements OnInit {\n\n  constructor(\n    private alertCtl: AlertController,\n    private modalCtl: ModalController\n  ) { }\n\n  ngOnInit() {\n    this.presentWarning();\n  }\n\n  async presentWarning() {\n    const warning = await this.alertCtl.create({\n      header: 'Security warning!',\n      subHeader: 'Please do not use any username or password that you are using currently anywhere else',\n      buttons: [{\n        text: 'Ok',\n        role: 'ok'\n      }]\n    });\n    await warning.present();\n  }\n\n  async presentUsernameModal() {\n    const username = await this.modalCtl.create({\n      component: UsernameComponent\n    });\n    return await username.present();\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcGxpY2F0aW9ucy9jaGF0LXdlYi1hcHAvc2lnbi11cC9zaWduLXVwLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { ModalController, AlertController, ToastController } from '@ionic/angular';\nimport { NgForm } from '@angular/forms';\nimport { SignUp } from './sign-up';\nimport { UsernameService } from '../chat-page/username.service';\n\n@Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.scss'],\n})\nexport class SignUpComponent implements OnInit {\n\n  constructor(\n    private modalCtl: ModalController,\n    private AlertCtl: AlertController,\n    private toastCtl: ToastController,\n    private userSrv: UsernameService\n  ) { }\n  private signUpData: SignUp;\n  private usernameTaken: boolean;\n\n  ngOnInit() {}\n\n  closeSignUpModal() {\n    this.modalCtl.dismiss();\n  }\n\n  // Process user signup data\n  async signUpUser(signUpData: NgForm) {\n    // Check if username is available\n    await this.isUsernameAvailable(signUpData.value.username);\n    if (this.usernameTaken) {\n      console.log('The username is already taken!');\n      return;\n    }\n    // Validate form fields\n    const pass1: string = signUpData.value.password1;\n    const pass2: string = signUpData.value.password2;\n    if ((signUpData.valid && (pass1.length > 3 && pass2.length > 3) && (pass1 === pass2)) === false) {\n      // Alert to check credentials\n      this.checkCredentialAlert();\n      return;\n    }\n    // Pass data to the database\n    this.signUpData = {\n      username: signUpData.value.username,\n      password: signUpData.value.password1\n    };\n    this.userSrv.signUpUser(this.signUpData);\n    // After passing data to the database\n    signUpData.resetForm();\n    this.modalCtl.dismiss();\n    this.successfullToast();\n  }\n\n  async checkCredentialAlert() {\n    const checkCred = await this.AlertCtl.create({\n      header: 'Error',\n      subHeader: 'Please check your credentials',\n      buttons: [{\n        text: 'Ok',\n        role: 'ok'\n      }],\n      translucent: true\n    });\n    return await checkCred.present();\n  }\n\n  async successfullToast() {\n    const success = await this.toastCtl.create({\n      message: 'Sign up successfull! Now you can login to start chatting!',\n      color: 'primary',\n      duration: 2000\n    });\n    success.present();\n  }\n\n  async isUsernameAvailable(username: string) {\n    // Fetch taken usernames\n    this.userSrv.getTakenUsernames().subscribe(taken => {\n      this.usernameTaken = taken.toString().split(',').includes(username);\n    }, error => console.log('Some error occured while fetching usernames', error));\n    return this.usernameTaken;\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcGxpY2F0aW9ucy9jaGF0LXdlYi1hcHAvdXNlcm5hbWUvdXNlcm5hbWUuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { ModalController, NavController, ToastController, AlertController } from '@ionic/angular';\nimport { NgForm } from '@angular/forms';\nimport { UsernameService } from '../chat-page/username.service';\nimport { SignUpComponent } from '../sign-up/sign-up.component';\n\n@Component({\n  selector: 'app-username',\n  templateUrl: './username.component.html',\n  styleUrls: ['./username.component.scss'],\n})\nexport class UsernameComponent implements OnInit {\n\n  constructor(\n    private modalCtl: ModalController,\n    private navCtl: NavController,\n    private us: UsernameService,\n    private toastCtl: ToastController\n  ) { }\n  private users: {_id: string, username: string}[];\n\n  public usernameExists = false;\n  private authStat = false;\n\n  ngOnInit() {}\n\n  closeUsernameModal = () => this.modalCtl.dismiss();\n\n  usernameFormProcessor(usernameData: NgForm) {\n    // // Check if the user already exists\n    // if (this.checkValidUsername(usernameData.value.username)) {\n    //   this.usernameExists = true;\n    //   usernameData.resetForm();\n    //   return;\n    // }\n\n    // // Add user and proceed to page\n    // if (this.usernameValidator(usernameData.value.username)) {\n    //   this.proceedToPage(usernameData.value.username);\n    // } else {\n    //   return;\n    // }\n\n    if (usernameData.invalid) {\n      return;\n    }\n\n    const usr = usernameData.value.username;\n    const pass = usernameData.value.password;\n\n    this.us.authLoginData({\n      username: usr,\n      password: pass\n    }).subscribe(response => {\n      if (response.status === 'exist&&passcorrect') {\n        this.us.onCorrectCred(response.message, usr, response.status);\n      } else {\n        this.us.onIncorrectCred(response.message, response.status);\n      }\n    },\n    error => {\n      console.log('There was some error authenticating', error);\n    },\n    () => {\n      // Proceed accordingly\n      if (this.us.stat !== 'exist&&passcorrect') {\n        this.wrongCredToast();\n      } else {\n        this.proceedToPage(usr);\n      }\n    });\n\n    usernameData.resetForm();\n  }\n\n  proceedToPage(username: string) {\n    this.us.setUsername(username);\n    this.modalCtl.dismiss();\n    this.us.setUser();\n    this.navCtl.navigateForward('/applications/chat-web-app/chat-page');\n  }\n\n  // Signup page segment\n  gotoSignUpPage() {\n    this.modalCtl.dismiss();\n    this.signUpPageModal();\n  }\n\n  async signUpPageModal() {\n    const signUp = await this.modalCtl.create({\n      component: SignUpComponent\n    });\n    return await signUp.present();\n  }\n\n  async wrongCredToast() {\n    const wrongCredToast = await this.toastCtl.create({\n      message: 'Incorrect user credentials. Please check your user name and password and try again',\n      duration: 2000,\n      color: 'danger',\n      translucent: true\n    });\n    wrongCredToast.present();\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServerService {\n\n  constructor() { }\n  // Server address to use\n  private development = 'http://localhost:3000';\n  private prod = 'https://backstab319.herokuapp.com';\n  private address = this.prod;\n\n  getServerAddress = () => this.address;\n}\n"],"sourceRoot":"webpack:///"}